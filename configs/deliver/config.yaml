"data":
  "input_shape" : [320, 320, 3]
  "images_train_dir" : '/computer_vision_uc/dataset-1280/train/images'
  "annotations_train_file" : '/computer_vision_uc/dataset-1280/train/annotations_json/train.json'
  "validation_split_size": 0.2
  "category_id_to_name" : {0: "tunnel"}
  "num_parallel_calls" : 2
  "prefetch_value": 1
  "seed": 10
  "images_val_dir": '/computer_vision_uc/dataset-1280/val/images'
  "annotations_val_file" : '/computer_vision_uc/dataset-1280/val/annotations_json/val.json'


"augmentation":
  "rotation" : 0.5
  "horizontal_flip" : 0.5
  "random_brightness_contrast" : 0.5
  "brightness_limit" : [-0.5, 0.5]
  "contrast_limit" : [-0.2, 0.2]
  "rotation_limit" : [-15, 15]
  "crop_erosion_rate" : 0.1
  "crop_prob" : 1.0

"training":
  "batch_size" : 4
  "learning_rate" : 0.001
  "num_batches" : 400

"inference":
  "bbox_color" : [255, 0, 0]  # Red
  "text_color" : [255, 255, 255] #WHITE
  "line_thickness" : 5
  "figure_size" : [22, 22]

"ocr":
  "preprocessing":
    "crop_box_coordinate": [0.15, 0.62, 0.88, 0.966]
    # desired height and width of the cropped image
    # The image does not change its size if you put a 0 in height or width
    "cropped_part_size": [200, 100]
    # change the perspective of an image to make it straight.
    "apply_deskewing": True
    # hsv value range of the desired part to deskew. This is used to make a better edge
    # detection of the object to deskew. Use opencv to determine the best ranges for hsv.
    # Only when apply_deskewing those values are processed.
    # The values are for h,s and v: {category_id: [lower_range, upper_range]}
    "h_range_for_deskewing": {"tunnel": [90, 120]}
    "s_range_for_deskewing": {"tunnel": [200, 255]}
    "v_range_for_deskewing": {"tunnel": [60, 255]}
    # use ppgan to make the resolution of the image better.
    "apply_super_resolution_gan": False
    "super_resolution_batch_size": 4

    "apply_adding_border": False
    # border box are given as follow [left, upper, right, lower] with each value
    #  the number of padded pixels
    "border_box": [10, 10, 190, 90]

    "apply_histogram_equilization": False
    "clip_limit": 1
    "tile_grid_size": [4, 4]
    # remove noise.
    "apply_median_blur": False
    "median_blur_kernel_size": 3
    
    # change brightness and contrast.
    "apply_brightness_contrast": True
    "brightness": 160
    "contrast": 110

    "apply_thresholding": False
    # available modes are: binary, otsu and adaptive_gaussian
    "threshold_mode": "adaptive_gaussian"
    # variables for adaptive_gaussian threshold
    "adaptive_threshold_bloc_size": 35
    "adaptive_threshold_constant": 2
    # variable for binary and otsu threshold.
    "threshold": 127

    "apply_inverting": True

    "apply_dilation": False
    "dilation_kernel_size": [2, 2]
    "dilation_number_of_iterations": 1

    "apply_erosion": False
    "erosion_kernel_size": [2, 2]
    "erosion_number_of_iterations": 1

  "model":
    "engine": "easy"  # "easy" or "paddle"
    "paddle_pretrained": ""
    "gpu_memory": 6000
    "rec_image_shape": "3, 32, 320"
    "rec_batch_num": 6
    "max_text_length": 10
    "use_space_char": False
    "drop_score": 0.5
    # post process result text. The text will be normalized to distances eg:3,1km, 1000m..
    "post_process": True
    "detect_box": False

  "postprocessing":
    "shortest_tunnel_length": 100
    "pre_regular_expression": [['[;,:]+','.'],['[^0-9km.]+','']]
    "grammar": ['[0-9]+', '\.?[0-9]*', 'k?m?']
    "post_regular_expression": [['\.',',']]
